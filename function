# -*- coding: utf-8 -*-
"""
Created on Tue Nov 27 18:14:29 2018

@author: chand
"""
def cost(e,G):
        return G.edge_dict()[e] 

def incident_edges(T,G):
        edges=[]
        for v in T[0]:
            for e in G.edge_set():
                if v in e:
                    edges.append(e)
            for e in edges:
                if e in T[1]:
                 edges.remove(e) 
        return edges

def valid_edges(T,G):
   Lcheck=len(T[1])
   edges=incident_edges(T,G)
   if Lcheck == 0: 
       return edges    
   if Lcheck == 1:
      previous_edge=incident_edges(({list(T[0])[0]},[]),G)
      for e in previous_edge:
          if e in edges:
               edges.remove(e)
      return edges 
   if Lcheck > 1:
       previous_edge=incident_edges(({list(T[0])[1]},[]),G)
       cycling_edge=incident_edges(({list(T[0])[2]},[]),G) 
       for e in previous_edge:
           if e in edges:
               edges.remove(e)
       for e in cycling_edge:
           if e in edges:
               edges.remove(e)
       return edges

def min_incident_edge(T,G):
    edges = valid_edges(T,G)
    min_edge=valid_edges(T,G)[0]
    min_edge_cost=cost((valid_edges(T,G)[0]),G)
    for e in edges:
        if min_edge_cost > cost(e,G): 
            min_edge = e
    return min_edge


def updateT(T,G):
    edges=min_incident_edge(T,G)
    T[1].append(edges)
    for v in edges:
        if v not in T[0]:
            T[0].add(v)            
    return T
